{"categories":[{"link":"/en/categories/homelab/","name":"Homelab","slug":"Homelab"},{"link":"/en/categories/networking/","name":"Networking","slug":"Networking"},{"link":"/en/categories/web-browser/","name":"Web Browser","slug":"Web Browser"}],"pages":[],"posts":[{"link":"/en/posts/unraid-install-nginx-proxy-manager/","text":"Nginx Proxy Manager (NPM) is a tool for managing and configuring Nginx reverse proxy through a user-friendly web interface. It supports multiple domains, HTTPS/SSL certificates, and automatic Let‚Äôs Encrypt integration. This allows you to configure Reverse Proxy, SSL, Redirects, and many other features without having to manually edit Nginx configuration files.\nThis article details the process of installing NPM on unRAID with PostgreSQL instead of using the default SQLite provided by NPM.\nüå± Requirements Cloudflare DDNS for unRAID Server\rInstall PostgreSQL\rüóÑÔ∏è Create a Database for NPM See the database creation guide in: Install PostgreSQL\rBASH\rCollapse\rCopy\r# psql -d postgres -U postgres -W Password: psql (16.9 (Debian 16.9-1.pgdg120+1)) Type \u0026#34;help\u0026#34; for help. postgres=# create database npm; CREATE DATABASE postgres=# create user npm with encrypted password \u0026#39;npmpd\u0026#39;; CREATE ROLE postgres=# grant connect on database npm to npm; GRANT postgres=# alter database npm owner to npm; ALTER DATABASE\rClick to expand and view more\rSo we have created a database for NPM with the following information:\nDB Name: npm DB User: npm DB Pass: npmpd üìÑ Create .env to Store Database Information I don‚Äôt want the database information to appear in the unRAID Container Web UI, so I put it into a .env file.\nBASH\rCollapse\rCopy\rhiepchau@unRAID: mkdir -p /mnt/user/appdata/npm hiepchau@unRAID: nano -p /mnt/user/appdata/npm/.env\rClick to expand and view more\r.env\rCollapse\rCopy\rDB_POSTGRES_HOST=localhost # Replace with NAS IP address DB_POSTGRES_PORT=5432 DB_POSTGRES_NAME=npm DB_POSTGRES_USER=npm DB_POSTGRES_PASSWORD=npmpd\rClick to expand and view more\rüêß Install NPM on unRAID Log in to the unRAID Dashboard Go to Apps Search Nginx Proxy Manager Install ‚Üí OK ‚Üí Switch to Advanced View Adjust Container configuration Apply ‚Üí The system will automatically pull data and deploy the app Important\r.env file\nXML\rCollapse\rCopy\rExtra Parameters: --env-file /mnt/user/appdata/npm/.env\rClick to expand and view more\rPort Since the unRAID Dashboard already uses port 80 for WebUI, if the container also uses this port, the application will not start. To resolve this conflict, I reassigned all ports by prefixing them with 18.\nWeb UI Port: 81 ‚Üí 1881\nHTTP Port: 80 ‚Üí 1880\nHTTPS Port: 443 ‚Üí 18443\nüîë Open Ports 443/80 for NPM For operation, NPM requires ports 80 (HTTP) and 443 (HTTPS). These are the standard ports used to handle external web requests, allowing NPM to act as a reverse proxy.\nPort 80 (HTTP): NPM uses this port to receive normal web requests.\nPort 443 (HTTPS): This is the most important port, as NPM uses it to:\nReceive secure requests.\nAutomatically issue and renew free SSL/TLS certificates from Let‚Äôs Encrypt for domains.\nLog in to Mikrotik via Winbox IP ‚Üí Firewall ‚Üí NAT ‚Üí Add New NAT Rule YAML\rCollapse\rCopy\rChain: dstnat Dst. Address List: WAN-IP # WAN IP list Protocol: 6(tcp) Dst. Port: 443 Action: dst-nat To Address: 192.168.10.10 # NAS IP To Ports: 18443 # Container port 18443\rClick to expand and view more\rNote\rDo the same to open Port 80\nüåê Access the Management Interface Open a web browser and go to\nHTML\rCollapse\rCopy\rhttps://\u0026lt;ip_nas\u0026gt;:1881\rClick to expand and view more\rDefault account:\nEmail: admin@example.com Password: changeme ‚ö†Ô∏è Log in and change the password immediately after the first login.\nüîÄ Configure Reverse Proxy After logging in and changing the password, we proceed to create a Reverse Proxy. Below, I will create a Reverse Proxy for the NPM service.\nNPM Dashboard ‚Üí Proxy Hosts ‚Üí Add Proxy Host. In the Details tab Domain name: test1.hiepchau.net Schema: HTTP Forward Hostname / IP: 192.168.10.10 Forward Port: 1881 üó∏ Block Common Exploits In the SSL tab SSL Certificate: Request a new SSL Certificate üó∏ Force SSL Email Address: your_email@gmail.com üó∏ Agree terms Click Save After successful creation, you can access the NPM Dashboard via the domain https://test1.hiepchau.net\r.\n‚úÖ Conclusion Through the detailed installation process presented, it is clear that deploying Nginx Proxy Manager on unRAID is not only an effective technical solution but also brings many practical benefits.\nWith NPM, managing web services is greatly simplified, while enhancing security by automating the issuance and renewal of SSL/TLS certificates. This ensures your system runs stably, securely, and is easily accessible via domains, replacing complex IP addresses and ports, thereby improving user experience.\n","title":"unRAID Server: Install Nginx Proxy Manager"},{"link":"/en/posts/turn-on-ublock-origin/","text":"This morning at the office, I noticed that Google Chrome had automatically updated to version 138.0.7204.169. Several websites I visit daily were suddenly flooded with ads. When I checked the Extensions Manager, I saw that both of my ad-blocking extensions ‚Äî uBlock Origin and Violent Monkey ‚Äî were disabled (since they use MV2), and I couldn‚Äôt re-enable them. This marks the shift toward Manifest V3 (MV3).\nWARNING\nRe-enabling MV2 on Google Chrome is not recommended.\nBy following the instructions below, you acknowledge the potential risks involved.\nDO WITH YOUR OWN RISK.\nRe-enable MV2 on Google Chrome Browsing through r/uBlockOrigin\r, I found updated instructions using chrome://flags to temporarily bring back MV2 support. This can help maintain uBlock Origin‚Äôs ad-blocking effectiveness on Chrome ‚Äî at least until Chrome completely drops support.\nOpen Chrome and go to chrome://flags Search for flag ‚Üí M137 Enable: Temporarily unexpire M137 flags Restart Chrome Go back to chrome://flags Search for ‚Üí MV2 Disable: Extension Manifest V2 Deprecation Warning Stage Disable: Extension Manifest V2 Deprecation Disabled Stage Disable: Extension Manifest V2 Deprecation Unsupported Stage Enable: Allow legacy extension manifest versions\nRestart Chrome Reinstall uBlock Origin and Violent Monkey extensions\nConclusion Re-enabling MV2 support as shown above is only a temporary workaround until Chrome officially removes MV2. When that happens, users will have to either switch to a browser that still supports MV2 or use more limited extensions ‚Äî such as uBlock Origin LITE.\nReference r/uBlockOrigin - hide warnings/prevent disabling with chrome flags (until June)\r","title":"Re-enable uBlock Origin on New Google Chrome"},{"link":"/en/posts/unraid-install-postgresql/","text":"PostgreSQL is the database management platform on my unRAID Server. It not only ensures stability for personal projects like NPM, Vaultwarden, Umami, etc., but also serves as the backbone for all my data activities.\nWhy PostgreSQL? Honestly, I don‚Äôt fully understand SQL (like PostgreSQL or MariaDB). However, many self-hosted apps require these databases, even though some can run on SQLite. Initially, SQLite seemed convenient since each app creates its own DB file. But eventually, I realized each app having its own SQLite DB was messy. So I consolidated everything into one place for convenience.\nAnd the reason I picked PostgreSQL is simple ‚Äî because Immich (my Google Photos alternative) only supports PostgreSQL üòÖ.\nInstalling PostgreSQL on unRAID In this article, I‚Äôll walk you through installing PostgreSQL16 using the available template in unRAID Community Applications (CA).\nLog in to the unRAID Dashboard\nGo to the Apps tab\nSearch for PostgreSQL16\nClick Install ‚Üí Ok\nAdjust Container Configuration:\nVariable: POSTGRES_USER: \u0026quot;\u0026quot; Variable: POSTGRES_DB: \u0026quot;\u0026quot; I left these blank so the app can auto-create a default user/database.\nLater, when apps require specific databases, I‚Äôll create them manually. Click Apply ‚Üí The system will automatically pull data and deploy the app Login and Create Database First, access the Docker container‚Äôs console for PostgreSQL:\nOpen unRAID Dashboard Go to Docker tab Right-click on postgresql16 container Select Console Log into the database: BASH\rCollapse\rCopy\r# psql -d postgres -U postgres -W Password: psql (16.9 (Debian 16.9-1.pgdg120+1)) Type \u0026#34;help\u0026#34; for help. postgres=#\rClick to expand and view more\rCreate a database: BASH\rCollapse\rCopy\rpostgres=# create database test; CREATE DATABASE postgres=# create user testid with encrypted password \u0026#39;testpd\u0026#39;; CREATE ROLE postgres=# grant connect on database test to testid; GRANT postgres=# alter database test owner to testid; ALTER DATABASE\rClick to expand and view more\rConclusion Installing PostgreSQL on unRAID is fairly easy thanks to the available template. Just input some basic settings and you‚Äôll have a stable PostgreSQL Docker container up and running.\nFrom this base, I‚Äôve created databases for apps like Vaultwarden (password manager), Nginx Proxy Manager (reverse proxy), Umami Analytics (analytics for this blog), etc. All databases are centralized instead of scattered SQLite files inside individual /appdata/app_services folders.\nI‚Äôll publish detailed guides for each app later. See you in the next post.\nHappy building!\n","title":"unRAID Server: Install PostgreSQL"},{"link":"/en/posts/cloudflare-ddns/","text":"Dynamic IP ‚Äî this is what most home internet packages offer. That means your IP address can change anytime, unpredictably, like when your wife suddenly gets mad at you. üò±\nWith constantly changing IPs, connecting to your unRAID server becomes difficult. And even if you have a static IP, remembering something like 101.101.97.255 is not realistic. I can\u0026rsquo;t even remember how much is in my secret stash, let alone a string of numbers like that.\nSo we need a DDNS (Dynamic DNS) solution. In this guide, I‚Äôll walk you through running Cloudflare-DDNS in Docker to automatically update your dynamic IP to a static DNS record.\nRequirements A Cloudflare\raccount A domain managed under your Cloudflare account Create a Cloudflare API Token The cloudflare-ddns container will use a custom API token to send your current IP address to your Cloudflare account. So we need to create the API Token first.\nGo to Cloudflare API\rClick Create Token ‚Üí Custom token (End of Page) ‚Üí Get started Fill in the details: Token name: cloudflare-ddns Permission: Zone | DNS | Edit Zone Resource: Include | All zones from an account | Select your domain Continue to summary Create Token Copy and save the token somewhere safe. Note: You won‚Äôt be able to view this token again.\nInstall cloudflare-ddns I‚Äôm using the onzu/cloudflare-ddns\rDocker image. Although it‚Äôs no longer maintained, it still works great.\nDocker Compose Create a folder for your docker-compose.yaml file:\nBASH\rCollapse\rCopy\rmkdir ~/cloudflare-ddns cd cloudflare-ddns nano docker-compose.yaml\rClick to expand and view more\rThe content of the docker-compose.yaml file is as follows:\nYAML\rCollapse\rCopy\rversion: \u0026#39;2\u0026#39; services: cloudflare-ddns: image: oznu/cloudflare-ddns:latest restart: always environment: - API_KEY=xxxxxxx # paste your API Token here - ZONE=example.com # your domain - SUBDOMAIN=subdomain # subdomain if you want - PROXIED=true\rClick to expand and view more\rRun the following command to initialize the container:\nBASH\rCollapse\rCopy\rdocker-compose up -d\rClick to expand and view more\runRAID UI Go to unRAID Dashboard ‚Üí APPS ‚Üí search for cloudflare ddns\nSelect the app ‚Üí Click Install\nConfigure variable of container ‚Üí Click Apply to deploy\nOnce the container is up and running, check your Cloudflare account to see if an A record has been added to your specified domain with your current public IP.\nConclusion And that‚Äôs it! Every 15 minutes, the application will automatically check your dynamic IP and update the latest one to Cloudflare. Now, instead of remembering a long IPv4 address or checking it every time it changes, you just need to remember your domain like test.hiepchau.net.\nGood luck!\n","title":"Update Dynamic IP with Cloudflare DDNS"},{"link":"/en/posts/my-homelab-in-august-2025/","text":"If you‚Äôve followed my blog before (well, my older blogs a few years back), you probably know I‚Äôve shared quite a bit about Debian (L1 Pro) or XPEnology (Fake NAS J1900). For personal reasons, I had to shut down those old blogs, and only now I‚Äôm back.\nSo I decided to write a new post about my current Homelab/NAS setup: what hardware I‚Äôm using, which OS I chose, why I picked it, and the self-hosted services I‚Äôm running‚Äîas well as what upgrades I plan for the future.\nüñ•Ô∏è Hardware After several upgrades, I am now using an HP 800 G4 SFF with an i5-8500 (8th Gen, Coffee Lake, 6C/6T), which delivers stable performance and includes an integrated UHD 630 iGPU that can handle 2‚Äì3 simultaneous 4K video transcodes.\nName Qty Case HP 800 G4 SFF 1 CPU I5-8500 1 RAM Hynix 16GB 2666MHz 2 SSD Samsung 981a 256GB 1 HDD WD Red 4TB 2 üßë‚Äçüíª unRAID OS Throughout my Homelab journey, I‚Äôve experimented with different operating systems. Each has its own charm, but for my current Homelab I‚Äôm running unRAID Server. A few main reasons why:\nWEB-UI: clean, intuitive, easy to manage.\nStorage: lets you combine drives of different sizes into a single array.\nMix 1TB, 2TB, 3TB drives into a 6TB pool, Add a 3TB drive as Parity for data protection. Docker: comes with a visual UI‚Äîno need to fiddle with CLI or docker-compose.\nüì¶ Self-hosted Services Running One thing I really like about unRAID is its prebuilt Docker templates and friendly WebUI, which makes deployment super easy. Here are some of the services I‚Äôm running:\nüõ°Ô∏è Networking \u0026amp; Proxy Nginx Proxy Manager ‚Äì reverse proxy + SSL for internal services. Cloudflare DDNS ‚Äì update dynamic IP to Cloudflare. üìÇ File \u0026amp; Storage File Browser ‚Äì web UI to manage files directly on the server. OpenList ‚Äì index and publish cloud storage (Google Drive, 115, etc). üì• Download \u0026amp; Torrent qBittorrent ‚Äì powerful torrent client with web UI. üìä Monitoring \u0026amp; Analytics Umami Analytics ‚Äì privacy-friendly web analytics, Google Analytics alternative. Uptime Kuma ‚Äì uptime monitoring with alerts when services go down. Diun (Docker Image Update Notifier) ‚Äì notify when containers have updates. üé¨ Media \u0026amp; Photos Plex Media Server ‚Äì store and stream movies/music. Arr Apps (Sonarr, Radarr, Lidarr‚Ä¶) ‚Äì automated media management \u0026amp; downloads. Immich ‚Äì self-hosted Google Photos alternative for managing photos \u0026amp; videos. üóÑÔ∏è Database Backend PostgreSQL ‚Äì main database for many apps. Redis ‚Äì caching and session storage. üîê Security \u0026amp; Management Vaultwarden ‚Äì self-hosted Bitwarden, password manager. üí≥ Other Utilities Wallos ‚Äì track subscriptions (Netflix, Spotify, etc). Kutt ‚Äì self-hosted URL shortener, Bitly alternative. üìå Conclusion So that‚Äôs my current Homelab‚Äîcovering the hardware, unRAID OS, and the self-hosted services I use daily. For me, a Homelab is not only about storage and entertainment but also a ‚Äúpersonal lab‚Äù where I can test technologies, learn, and optimize based on my needs.\nGoing forward, I plan to keep upgrading hardware, fine-tuning the setup, and experimenting with more apps. If you‚Äôre also interested in Homelab or exploring unRAID, I hope this post gives you some ideas to start‚Äîor to expand‚Äîyour own setup.\nüí¨ Got questions or want to share your experience? Drop a comment below‚Äîwe can exchange ideas and maybe learn from each other.\n","title":"unRAID Server: August 2025 Update"},{"link":"/en/posts/wireguard-vpn-tunnel/","text":"You want to securely access your NAS at home from the office without exposing port 22 to avoid brute-force attacks. With a Mikrotik hAP ac¬≤ running RouterOS v7 that supports WireGuard, you can easily set up a secure VPN connection. This allows you to SSH into your NAS safely from anywhere, enhancing your home network security.\nRequirements Mikrotik: Router OS Ver 7. Static IP or DDNS Client: WireGuard Client\rinstalled Issues related to Mikrotik‚Äôs PPPoE / DHCP setup are not covered in this post.\nSetting Up WireGuard on Mikrotik and Client Step 1: Create WireGuard Interface on Mikrotik Open Winbox and log into your Mikrotik.\nWireGuard ‚Üí Add new Interface Name: wireguard1 Listen Port: 13231 Tip\rYou can change the Name/Port as needed.\nStep 2: Assign IP Address to WireGuard After creating the interface, create a separate Address List for easier management.\nGo to IP ‚Üí Address ‚Üí Add new Address and enter:\nYAML\rCollapse\rCopy\rAddress: 25.25.25.1/24 Network: 25.25.25.0 Interface: wireguard1\rClick to expand and view more\rStep 3: Retrieve Public Key on Client On your PC, open WireGuard ‚Üí Add Tunnel ‚Üí Add empty tunnel.\nThen name the tunnel and copy the Public Key.\nStep 4: Create Peer to Access WireGuard Server on Client Once you have the Public Key, return to WinBox.\nWireGuard ‚Üí Peer ‚Üí Add new Peer and paste the copied Public Key. Also assign an IP to this connection.\nStep 5: Configure WireGuard on Client After creating the Peer, go back to the WireGuard interface tab and copy its Public Key.\nThen return to the PC, copy the sample config below and adjust it to match your settings.\nYAML\rCollapse\rCopy\r[Interface] PrivateKey = kPnywjIUK8xysYCZWYPg7OZXfJLO/1qjUBR6qs8sVkk= Address = 25.25.25.2/32 # IP assigned in Step 4 DNS = 8.8.8.8 [Peer] PublicKey = P4KPCop/66Qtw+EShxVyoefuUYC0zxfNx7h4y+AanBo= AllowedIPs = 0.0.0.0/0 Endpoint = hiepchau.net:13231 PersistentKeepalive = 10\rClick to expand and view more\rStep 6: NAT Port 13231 in Winbox Back to Winbox ‚Üí IP ‚Üí Firewall ‚Üí Filter Rules ‚Üí Add new Rule:\nYAML\rCollapse\rCopy\rChain: input Protocol: udp Dst. Port: 13231 In. Interface: all ppp Action: accept\rClick to expand and view more\rMove this rule on top but under PPPoE rule\nStep 7: NAT Masquerade to Access Internal LAN From Step 6, switch to: IP ‚Üí Firewall ‚Üí NAT ‚Üí Create new NAT Rule:\nYAML\rCollapse\rCopy\rChain: srcnat Src. Address: 25.25.25.1/24 Action: masquerade\rClick to expand and view more\rResult And that‚Äôs it!\nGood luck setting up your WireGuard VPN for secure remote access to your LAN!\n","title":"Mikrotik: Setup WireGuard VPN"}],"tags":[{"link":"/en/tags/chrome/","name":"Chrome","slug":"Chrome"},{"link":"/en/tags/cloudflare/","name":"Cloudflare","slug":"Cloudflare"},{"link":"/en/tags/database/","name":"Database","slug":"Database"},{"link":"/en/tags/ddns/","name":"DDNS","slug":"DDNS"},{"link":"/en/tags/mikrotik/","name":"Mikrotik","slug":"Mikrotik"},{"link":"/en/tags/mv2/","name":"MV2","slug":"MV2"},{"link":"/en/tags/mv3/","name":"MV3","slug":"MV3"},{"link":"/en/tags/nas/","name":"NAS","slug":"NAS"},{"link":"/en/tags/postgresql/","name":"PostgreSQL","slug":"PostgreSQL"},{"link":"/en/tags/reverse-proxy/","name":"Reverse-Proxy","slug":"Reverse-Proxy"},{"link":"/en/tags/self-hosted/","name":"Self-Hosted","slug":"Self-Hosted"},{"link":"/en/tags/ublock-origin/","name":"UBlock Origin","slug":"UBlock Origin"},{"link":"/en/tags/unraid/","name":"UnRAID","slug":"UnRAID"},{"link":"/en/tags/vpn/","name":"VPN","slug":"VPN"}]}